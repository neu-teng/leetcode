题目描述：
给定一个数组，数组内元素仅有一个出现一次，其余均出现两次，找到该数组

方法1：采用哈希表，首次出现给定某个值，再次出现剔除

class Solution:
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return None
        final_table = {}
        for i,j in enumerate(nums):
            if j not in final_table:
                final_table[j] = 1
            else:
                final_table.pop(j)
        return final_table.popitem()[0]
        
时间复杂度： O（n)
空间复杂度： O（n)

方法2：对列表中的所有唯一值乘以2减掉现在的列表的总值，即是现在仅出现一次的数值

Class Solution:
    def singleNumber(self,nums):
        sum_value = sum(nums)
        set_sum = sum(set(nums))*2
        return set_sum - sum_value
        
时间复杂度： O（2*n)
空间复杂度： O（n)
