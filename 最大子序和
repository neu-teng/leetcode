class Solution:
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        this_sum =0
        max_sum = nums[0]
        for i in range(len(nums)):
            if this_sum <0 :
                this_sum =0
            this_sum += nums[i]
            if this_sum > max_sum:
                max_sum = this_sum
        return max_sum
        
 #超过97.52%

法2：
构建一个新的列表存储对应的最大子序，再从其中找最大的

class Solution:
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        dp = [nums[0]]*len(nums)
        for i in range(1, len(nums)):
            if dp[i-1] > 0:
                dp[i] = dp[i-1] + nums[i]
            else:
                dp[i] = nums[i]
        return max(dp)
        
#时间复杂度一样 ，但需要额外的空间去容纳对应的序列和 
